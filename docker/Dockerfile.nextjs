# Base image
FROM node:18-alpine AS base

# Install necessary packages and pnpm globally
RUN apk update && apk add --no-cache libc6-compat
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
RUN pnpm add -g turbo@2

# Set working directory
WORKDIR /app

# Build dependencies layer
FROM base AS builder

ARG APP_NAME  # Define the application name argument

# Copy all files
COPY . .

# Generate a partial monorepo with a pruned lockfile for the target workspace
RUN turbo prune ${APP_NAME} --docker
RUN cp .prettierrc out/full

# Install dependencies in a pruned environment
FROM base AS installer
WORKDIR /app

ARG APP_NAME

# Copy pruned package files
COPY --from=builder /app/out/json/ .

# Install only the necessary dependencies for the pruned workspace
RUN pnpm install --frozen-lockfile

# Build the project
COPY --from=builder /app/out/full/ .
RUN pnpm turbo run build --filter=${APP_NAME}

# Prepare the final production image
FROM base AS runner
WORKDIR /app

ARG APP_NAME
ENV APP_NAME=${APP_NAME}

# Add non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/${APP_NAME}/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/${APP_NAME}/.next/static ./apps/${APP_NAME}/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/${APP_NAME}/public ./apps/${APP_NAME}/public

# Run the application
CMD ["/bin/sh", "-c", "node apps/$APP_NAME/server.js"]
